Architectures, tools and best practices for diagnosing and monitoring OpenStack deployments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Abstract:**

The use of ELK (Elastic, Logstash and Kibana) and variants (EFK - Elastic, Fluentd and Kibana) for log aggregation has been well documented. What is missing is how aggregated logging can be used for advanced diagnostics, monitoring and auditing in OpenStack. The answer starts with capturing the right data, cleaning of data with filtering, addition of metadata at various stages of the log data pipeline and finally to visualize the indexed data with advanced queries and dashboards built using Kibana. Come share our experiences with log collection, filtering, metadata addition and visualization of logs using ELK stack in OpenStack environment. For instance, you might learn how to write and save a Kibana query when “nova instance fails to boot”.  Or you might learn how to create a Kibana dashboard that monitors the health of your OpenStack environment. And more with real screenshots and demos.  


* **Tushar Katarki** *(Tushar Katarki is a senior technology professional with experience in datacenter and cloud (OpenStack) architecture, product management and engineering. He is currently an Integration Architect at Red Hat driving cross product architecture and integration across Red Hat and partner products (including OpenStack). Prior to the current role, Tushar has been a product manager and a developer at Red Hat, Oracle (Sun Microsystems), Polycom, Sycamore Networks and Percona. Tushar has an MBA from Babson College and MS in Computer Science from University at Buffalo.)*

* **Peter Portante** *(Peter Portante, a Software Engineer since 1986 and a Red Hat Associate since 2011, works in the Performance Engineering team, developing tools and systems to help analyze and understand the behaviors of distributed systems. From developing methods to efficiently collect, normalize, and warehouse all sorts of data about systems, and then visualize and analyze such large volumes of data, Peter's passion is working to make such complex data sets easily accessible and useful. Working with ElasticSearch and the surrounding tool ecosystem has made it much easier to evangelize the accessibility of large data sets today. Prior to these efforts, Peter was a member of the OpenStack Swift core team. Formerly of HP/Compaq/Digital of yesteryear, Peter spent a number of years working on the POSIX Threads implementations of Tru64 Unix and OpenVMS in their two-level scheduling implementations.)*
