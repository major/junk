Containers are packages: A premier on build tools and strategies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Abstract:**

The Dockerfile can tackle a pretty large number of use cases, enabling a near flat learning curve but its limitations can lead to complexity that degrades performance benefits and space optimizations.  There is a need for organizations building OpenStack themselves from the ground up to repackage multiple components so as OpenStack's infrastructure components get containerized you'll want to become familiar with the image build toolchain that'll replace your RPM and APT toolchains. In this talk I'll introduce the various build tools at your disposal and strategies you can use to reduce the number of Dockerfiles you'll have to maintain.  Plus improve your insight into these images by utilizing declarative configuration management at build time.  As a bonus we'll leverage the the work done by the Puppet OpenStack and Docker communities to illustrate these strategies, proving that you do not need to throw out your entire infrastructure to migrate to a containerized world.


* **Cody Herriges** *(Many of the core technologies and philosophies I hold dear today were instilled in me as a student employee while attending university at Portland State: simplicity, automation, and opensource.  After promotion to a full time employee as a Lead Unix admin I eventually made a transition to Puppet, after it moved its headquarters to Portland, OR. I found that Puppet was a part of my daily life and had become the most important tool for getting things done in my infrastructure.  That fact convinced me that Puppet and automation was going to be the cornerstone of a modern technology stack, a movement I decided I wanted to be a part of.  Since then I've moved from Professional Service through Business Development to SysOps. I am now serving as a Prinicpal SysOps Engineer; where I work with internal and external partners to improve the way everyone utilizes the cloud technologies of today and tomorrow. I do this by staying close to the tech that facilitates the demands of a fast growing software company.)*
